name: Code Coverage Check

on:
  push:
    branches:
      - main

jobs:
  code-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Run Jest with coverage
        run: npm test -- --coverage

      - name: Echo files
        run: ls

      - name: Set min coverage
        run: MINIMUM_COVERAGE=80 

      - name: Log min coverage
        run: echo $MINIMUM_COVERAGE

      - name: Set coverage
        run: COVERAGE=$(cat coverage/coverage-final.json | jq -r '.total.lines.pct')
        
      - name: Log coverage
        run: echo $COVERAGE

      - name: Check code coverage
        run: |
          # You can adjust the minimum code coverage threshold here (e.g., 80%).
          MINIMUM_COVERAGE=80
          
          # Extract the code coverage report in JSON format
          COVERAGE=$(cat coverage/coverage-final.json | jq -r '.total.lines.pct')

          # Print out values for coverage and minimum coverage
          echo '$COVERAGE'
          echo '$MINIMUM_COVERAGE'

          
          # Compare the coverage percentage with the minimum threshold.
          if (( $(awk 'BEGIN {print ('$COVERAGE' < '$MINIMUM_COVERAGE')}') )); then
            echo "Code coverage is below the minimum threshold of $MINIMUM_COVERAGE%."
            exit 1
          else
            echo "Code coverage meets the minimum threshold of $MINIMUM_COVERAGE%."
          fi
        env: 
          # Install jq for JSON parsing
          JQ_VERSION: 1.6
          JQ_URL: "https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64"
      
      - name: Cleanup coverage report
        run: rm -rf coverage

# This GitHub Actions workflow will do the following:

# 1. It triggers on every push to the `main` branch.
# 2. It checks out your repository's code.
# 3. It sets up Node.js and installs your project's dependencies.
# 4. It runs Jest with coverage using `npm test -- --coverage`.

# 5. It parses the code coverage percentage from the Jest coverage report.
# 6. It compares the coverage percentage with the minimum threshold (you can adjust this threshold as needed).
# 7. If the coverage is below the threshold, it exits with an error, preventing the merge.

# Make sure to adjust the `MINIMUM_COVERAGE` variable to your desired minimum coverage percentage. You can also customize the workflow further based on your project's specific needs.
